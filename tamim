// ==UserScript==
// @name         Krunker.io Aimbot Currently being updated You get every item too

// @version      1.0.1


// @author       IFOUNDBARNEY
// @description  Krunker.io aimbot, wall hacks, every skin, every item, anit-ban!
// @match        *://krunker.io/*
// @grant        GM.registerMenuCommand
// @grant        unsafeWindow
// @updateURL
// @run-at       document-start
// @namespace https://greasyfork.org/users/706176
// ==/UserScript==

window = unsafeWindow;

window.hackToggle = true;

let game, input, me, recon, lock;

const key = {
    frame: 0,
    delta: 1,
    ydir: 2,
    xdir: 3,
    moveDir: 4,
    shoot: 5,
    scope: 6,
    jump: 7,
    crouch: 8,
    reload: 9,
    weaponScroll: 10,
    weaponSwap: 11,
    moveLock: 12
};

const varsRe = {
    cnBSeen: { regex: /if\(!\w+\['(\w+)'\]\)continue;/, pos: 1 },
    recoilAnimY: { regex: /,this\['(\w+)']\+=this\['recoilForce']/, pos: 1 },
    aimVal: { regex: /this\['(\w+)']-=0x1\/\(this\['weapon']\['\w+']\/\w+\)/, pos: 1 },
    pchObjc: { regex: /0x0,this\['(\w+)']=new \w+\['Object3D']\(\),this/, pos: 1 },
    didShoot: { regex: /--,\w+\['(\w+)']=!0x0/, pos: 1 },
    nAuto: { regex: /'Single\\x20Fire','varN':'(\w+)'/, pos: 1 }
}

const vars = {}

const getDistance = function(x1, y1, z1, x2, y2, z2) {
    var dx = x1 - x2;
    var dy = y1 - y2;
    var dz = z1 - z2;
    return Math.hypot(dx, dy, dz);
}

const getDirection = function(a, b, c, d) {
    return Math.atan2(b - d, a - c);
}

const getXDir = function(e, n, r, i, a, s) {
    const o = Math.abs(n - a);
    const dis = getDistance(e, n, r, i, a, s);
    return Math.asin(o / dis) * (n > a ? -1 : 1);
}

const getTarget = function() {
    let fil = game.players.list.filter(function(player) {
        return (player[vars.cnBSeen] && player.active && player !== me) && (!me.team || me.team !== player.team)
    });
    return fil[0];
}

const shoot = function() {
    input[key.scope] = 1;
    let weapon = me.weapon;
    if (weapon[vars.nAuto] && me[vars.didShoot]) {
        input[key.shoot] = 0;
    } else if (!me[vars.aimVal]) {
        input[key.shoot] = 1;
    }
}

const toggleHack = function() {
    window.hackToggle = !window.hackToggle;
}

window.useHack = function(i, g, m, r, l) {
    game = g; input = i; me = m; recon = r; lock = l;

    let target = getTarget();
    if (target && window.hackToggle) {
        const yDire = (getDirection(me.z, me.x, target.z, target.x) || 0) * 1000;
        const xDire = ((getXDir(me.x, me.y, me.z, target.x, target.y, target.z) || 0) - (0.3 * me[vars.recoilAnimY])) * 1000;

        input[key.ydir] = yDire;
        input[key.xdir] = xDire;

        shoot();
    }
}

const patchCode = function(code) {
    for (let i in varsRe) {
        const key = varsRe[i];
        vars[i] = key.regex.exec(code)[key.pos];
    }
    code = code.replace(varsRe.cnBSeen.regex, "if (!window.hackToggle) { $& };").replace(/!(\w+)\['transparent']/, `$&& (!window.hackToggle || !$1.penetrable )`).replace(/(this\['\w+']=function\(\w+,\w+,\w+,\w+\){)(this\['recon'])/, "$1{\nconst [input, game, recon, lock] = arguments, me = this;\nwindow.useHack(input, game, me, recon, lock);};$2") // patches code
    GM.registerMenuCommand("Toggle Hack", toggleHack);
    return code;
}

// <start> IFOUNBDARNEY Creates™ //©//
function hookJoin(wnd) {
    const arrayJoin = wnd.Array.prototype.join;
    wnd.Array.prototype.join = new Proxy(arrayJoin, {
        apply: function(target, _this, _arguments) {
            let ret = Function.prototype.apply.apply(target, [_this, _arguments]);
                if (_arguments.length && _arguments[0] == "" && _this.length > (420 * 69 /* funny numbers */)) {
                    let code = ret;
                    code = patchCode(code);
                    return code;
                }
                return ret;
            }
        });
}

const appendChild = HTMLBodyElement.prototype.appendChild;
HTMLBodyElement.prototype.appendChild = new Proxy(appendChild, {
    apply: function(target, _this, _arguments) {
        let ret = Function.prototype.apply.apply(target, [_this, _arguments]);
        if (_arguments.length && _arguments[0].__proto__ == HTMLIFrameElement.prototype) {
            hookJoin(_arguments[0].contentWindow);
        }
        return ret;
    }
});
// <end> IFOUNBDARNEY Creates™ //©//




// Every Item in Game //



let skinConfig = {}

function s(c) {
    c.send = new Proxy(c.send, {
        apply(target, thisArg, msg) {
            if (msg[0] === "ent")
                skinConfig = {
                    main: msg[1][2][0],
                    secondary: msg[1][2][1],
                    hat: msg[1][3],
                    body: msg[1][4],
                    knife: msg[1][9],
                    dye: msg[1][14],
                    waist: msg[1][17],
                }

            return target.apply(thisArg, msg);
        }
    });
    c._dispatchEvent = new Proxy(c._dispatchEvent, {
        apply(target, thisArg, [type, msg]) {
            if (skinConfig && type === "0") {
                let playersInfo = msg[0];
                let perPlayerSize = 38;
                while (playersInfo.length % perPlayerSize !== 0)
                    perPlayerSize++;

                for(let i = 0; i < playersInfo.length; i += perPlayerSize)
                    if (playersInfo[i] === c.socketId) {
                        playersInfo[i + 12] = [skinConfig.main, skinConfig.secondary];
                        playersInfo[i + 13] = skinConfig.hat;
                        playersInfo[i + 14] = skinConfig.body;
                        playersInfo[i + 19] = skinConfig.knife;
                        playersInfo[i + 25] = skinConfig.dye;
                        playersInfo[i + 33] = skinConfig.waist;
                    }
            }
            return target.apply(thisArg, arguments[2]);
        }
    });
}

const events = Symbol("kpal")
Object.defineProperty(Object.prototype, "events", {enumerable:!1,get(){return this[events]},set(v){if(this.ahNum===0){s(this)}this[events]=v;}})
const skins = Symbol("lol anticheat")
Object.defineProperty(Object.prototype, "skins", {
    enumerable: false,
    get() {
        if (this.stats) {
            let skins = [];
            for(let i = 0; i < 5000; i++)
                skins.push({ind: i, cnt: i});

            return skins;
        }
        return this[skins];
    },
    set(v) { this[skins] = v; }
});
